{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","Scroll","props","style","overflowY","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+MAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,sBAAKC,UAAU,kDAAf,UACI,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,UACpD,gCACI,6BAAKJ,IACL,4BAAIC,WCOLI,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BACIA,EAAOC,KAAI,SAACC,EAAMC,GACb,OAAQ,cAAC,EAAD,CAAcV,GAAIO,EAAOG,GAAGV,GAAIC,KAAMM,EAAOG,GAAGT,KAAMC,MAAOK,EAAOG,GAAGR,OAA5DQ,SCGrBC,EARA,SAACC,GACZ,OACI,qBAAKT,UAAU,MAAMU,MAAO,CAACC,UAAW,SAAUC,OAAQ,SAA1D,SACKH,EAAMI,YCQJC,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKhB,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACjBiB,KAAK,SACLC,YAAY,iBACZC,SAAUH,OCcPI,E,kDAnBX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,+DAEJG,KAAKhB,MAAMI,a,GAhBCc,aC4CZC,E,kDAvCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEX,YAAce,EAAMC,OAAOC,SAb3C,EAAKX,MAAQ,CACTjB,OAAQ,GACRW,YAAa,IAJP,E,gEAQO,IAAD,OAChBkB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BAOtC,IAAD,EAC4BZ,KAAKJ,MAA7BjB,EADJ,EACIA,OAAQW,EADZ,EACYA,YACVuB,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS3B,EAAY0B,kBAErD,OAA0B,KAAlBrC,EAAOuC,OAAe,oBAAI3C,UAAU,KAAd,wBAE1B,sBAAKA,UAAU,KAAf,UACK,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWgB,aAAcS,KAAKI,iBAC9B,cAAC,EAAD,UACG,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQkC,e,GA/B5BX,aCMHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.d2942538.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return(\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow tc shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return(\n        <div>{\n            robots.map((user, i) =>{\n                 return (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n                );\n            })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div className=\"pa4\" style={{overflowY: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return(\n        <div className=\"pa2\">\n            <input className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder=\"search friends\"\n            onChange={searchChange} />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>OOPS... Something went wrong!</h1>\n        }\n        return this.props.children\n    } \n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends Component{\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(users => this.setState({ robots: users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield : event.target.value })\n    }\n\n    render(){\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n            return !robots.length === 0 ? <h1 className='tc'>Loading...</h1>:\n            (\n                <div className='tc'> \n                     <h1 className='f1'>RoboFriends</h1>\n                     <SearchBox searchChange={this.onSearchChange}/>\n                     <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                     </Scroll>\n                </div>\n             );\n        }\n    }\n \n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}